/*
 * Copyright (c) 2017 the ACRA team
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import com.android.build.gradle.LibraryPlugin
import com.jfrog.bintray.gradle.BintrayPlugin

buildscript {
    repositories {
        jcenter()
        google()
    }
    dependencies {
        classpath "com.android.tools.build:gradle:$androidBuildPluginVersion"
        classpath "com.jfrog.bintray.gradle:gradle-bintray-plugin:$bintrayPluginVersion"
        classpath "net.researchgate:gradle-release:$releasePluginVersion"
    }
}
apply plugin: 'net.researchgate.release'

release {
    tagTemplate = '$name-$version'
    git {
        pushToRemote = 'ACRA'
        requireBranch = 'master'
    }
}

task build {
    subprojects.each {
        beforeReleaseBuild.dependsOn "${it.path}:clean"
        dependsOn "${it.path}:build"
    }
}

apply from: 'pom.gradle'
// allow pom content to be accessed directly
class MapDelegate {
    Map map
    List list
    String name

    MapDelegate(String name) {
        def mc = new ExpandoMetaClass(MapDelegate, false, true)
        mc.initialize()
        this.metaClass = mc
        map = [:]
        list = []
        this.name = name
    }

    def methodMissing(String name, args) {
        def value = args[0]
        if (value instanceof Closure) {
            value.delegate = new MapDelegate(name)
            value.resolveStrategy = Closure.DELEGATE_ONLY
            value.call()
            if (this.name == "${name}s") {
                list.add(value)
                return
            }
        }
        map.put(name, value)
    }

    def prepare() {
        map.each { name, value ->
            if (value instanceof Closure) {
                if (value.list.empty) {
                    value.prepare()
                } else {
                    value = value.list
                    value.each { it -> it.prepare() }
                }
            }
            this.metaClass.registerInstanceMethod("get${name.capitalize()}", { -> value })
        }
    }
}

pom.resolveStrategy = Closure.DELEGATE_ONLY
pom.delegate = new MapDelegate('project')
pom.call()
pom.prepare()

subprojects {
    repositories {
        jcenter()
        google()
    }
    plugins.withType(LibraryPlugin) {
        android {
            compileSdkVersion Integer.parseInt(androidVersion)
            defaultConfig {
                minSdkVersion androidMinVersion
                targetSdkVersion androidVersion
                versionName version
            }
            buildTypes {
                release {
                    minifyEnabled false
                }
            }
            lintOptions {
                abortOnError false
            }
            testOptions {
                unitTests {
                    includeAndroidResources = true
                    all {
                        systemProperty 'robolectric.logging.enabled', true
                    }
                }
            }
        }

        dependencies {
            testImplementation "junit:junit:$junitVersion"
            testImplementation "org.robolectric:robolectric:3.6.1"
            testImplementation "org.ow2.asm:asm:6.0"
        }

        task sourcesJar(type: Jar) {
            from android.sourceSets.main.java.srcDirs
            classifier = 'sources'
        }

        task javadoc(type: Javadoc) {
            source = android.sourceSets.main.java.srcDirs + files("${project.buildDir}/generated/source/aidl/release") + files("${project.buildDir}/generated/source/apt/release")
            classpath += files(android.getBootClasspath().join(File.pathSeparator)) + files("${project.buildDir}/generated/source/r/release")
            options.with {
                linksOffline "http://d.android.com/reference", "${android.sdkDirectory.path}/docs/reference"
            }
            doFirst {
                try {
                    classpath += files(android.libraryVariants.collect { variant -> variant.javaCompile.classpath.files })
                } catch (e) {
                    logger.warn 'failed to get classpath for javadoc', e
                }
            }
            afterEvaluate {
                dependsOn assembleRelease
                options { opt ->
                    project.configurations.implementation.getAllDependencies().each { dep ->
                        if (dep.group != project.group) return
                        try {
                            opt.linksOffline "http://www.javadoc.io/page/${dep.group}/${dep.name}/${dep.version}/", "${rootProject.childProjects[dep.name].buildDir}/docs/javadoc/"
                        } catch (e) {
                            logger.warn "${dep.name} javadoc won't be linked", e
                        }
                    }
                }
            }
        }

        task javadocJar(type: Jar, dependsOn: javadoc) {
            from javadoc
            classifier = 'javadoc'
        }
    }
    plugins.withType(JavaPlugin) {
        task sourcesJar(type: Jar) {
            from sourceSets.main.allSource
            classifier = 'sources'
        }

        task javadocJar(type: Jar, dependsOn: javadoc) {
            from javadoc
            classifier = 'javadoc'
        }
    }
    plugins.withType(MavenPublishPlugin) {
        publishing {
            publications {
                maven(MavenPublication) {
                    groupId group
                    version version
                    artifact sourcesJar
                    artifact javadocJar
                    pom.withXml {
                        asNode().children().last() + rootProject.ext.pom
                    }
                    if (tasks.findByName('bundleRelease')) {
                        artifact bundleRelease
                        pom.withXml {
                            def dependenciesNode = asNode().appendNode('dependencies')
                            // List all compile dependencies and write to POM
                            configurations.implementation.getAllDependencies().each { dep ->
                                if (dep.group == null || dep.version == null || dep.name == null || dep.name == "unspecified") return // ignore invalid dependencies
                                def dependencyNode = dependenciesNode.appendNode('dependency')
                                dependencyNode.appendNode('groupId', dep.group)
                                dependencyNode.appendNode('artifactId', dep.name)
                                dependencyNode.appendNode('version', dep.version)
                                if (!dep.transitive) {
                                    // If this dependency is transitive, we should force exclude all its dependencies them from the POM
                                    def exclusionNode = dependencyNode.appendNode('exclusions').appendNode('exclusion')
                                    exclusionNode.appendNode('groupId', '*')
                                    exclusionNode.appendNode('artifactId', '*')
                                } else if (!dep.properties.excludeRules.empty) {
                                    // Otherwise add specified exclude rules
                                    def exclusionsNode = dependencyNode.appendNode('exclusions')
                                    dep.properties.excludeRules.each { rule ->
                                        def exclusionNode = exclusionsNode.appendNode('exclusion')
                                        exclusionNode.appendNode('groupId', rule.group ?: '*')
                                        exclusionNode.appendNode('artifactId', rule.module ?: '*')
                                    }
                                }
                            }
                        }
                    } else {
                        from components.java
                    }
                }
            }
        }
        plugins.withType(BintrayPlugin) {
            bintray {
                user = artifactoryUser
                key = artifactoryApiKey
                publications = ['maven']
                publish = true
                pkg {
                    repo = 'maven'
                    userOrg = 'acra'
                    name = pom.name
                    websiteUrl = pom.url
                    vcsUrl = pom.scm.url
                    licenses = pom.licenses*.name
                    publicDownloadNumbers = true
                    version {
                        name = project.version
                        desc = pom.description
                        mavenCentralSync {
                            sync = false
                            if (hasProperty('ossrhUser')) {
                                user = ossrhUser
                                password = ossrhPassword
                            }
                        }
                    }
                }
            }
            bintrayUpload.dependsOn(build, javadocJar, sourcesJar, 'generatePomFileForMavenPublication')
            rootProject.afterReleaseBuild.dependsOn bintrayUpload
        }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

task joinedJavadoc(type: Javadoc) {
    subprojects { project ->
        afterEvaluate {
            def tasks = project.tasks.withType(Javadoc)
            rootProject.joinedJavadoc {
                source += files(tasks.collect { it.source })
                classpath += files(tasks.collect { it.classpath })
            }
            plugins.withType(LibraryPlugin) {
                rootProject.joinedJavadoc {
                    options.with {
                        linksOffline "http://d.android.com/reference", "${android.sdkDirectory.path}/docs/reference"
                    }
                    doFirst {
                        classpath += files(android.libraryVariants.collect { variant -> variant.javaCompile.classpath.files })
                    }
                }
            }
        }
    }
    destinationDir = file("${project.buildDir}/javadoc")
}
